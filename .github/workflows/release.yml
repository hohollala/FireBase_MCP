name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for current version
            awk '/^## \['${{ steps.get-version.outputs.version }}'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md
            if [ -s current_changelog.md ]; then
              echo "changelog<<EOF" >> $GITHUB_OUTPUT
              cat current_changelog.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "changelog=No changelog available for this version." >> $GITHUB_OUTPUT
            fi
          else
            echo "changelog=No changelog file found." >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.tag }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          body: |
            ## Firebase MCP Server ${{ steps.get-version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ### Installation
            
            ```bash
            npm install -g firebase-mcp-server@${{ steps.get-version.outputs.version }}
            ```
            
            ### Docker
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.version }}
            ```
            
            ### What's Changed
            See the changelog above for detailed changes.
            
            ### Verification
            You can verify the integrity of the release artifacts using the checksums provided below.
            
          draft: false
          prerelease: ${{ contains(steps.get-version.outputs.version, 'alpha') || contains(steps.get-version.outputs.version, 'beta') || contains(steps.get-version.outputs.version, 'rc') }}

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Create package
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            dist/
            *.tgz

  # Publish to NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$(echo $VERSION | grep -E '(alpha|beta|rc)' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Publish to NPM
        run: |
          if [ "${{ steps.get-version.outputs.is-prerelease }}" == "true" ]; then
            npm publish --tag next
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build and Push Docker Image
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f1-2)
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.get-version.outputs.version }}
            type=raw,value=${{ steps.get-version.outputs.minor }}
            type=raw,value=${{ steps.get-version.outputs.major }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.get-version.outputs.version }}

  # Upload Release Assets
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, publish-npm, build-docker]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts

      - name: Generate checksums
        run: |
          sha256sum *.tgz > checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Upload NPM package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: firebase-mcp-server-${{ github.ref_name }}.tgz
          asset_name: firebase-mcp-server-${{ github.ref_name }}.tgz
          asset_content_type: application/gzip

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, publish-npm]
    if: ${{ !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: npm run docs:api

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git diff --staged --quiet || git commit -m "docs: update API documentation for ${{ github.ref_name }}"
          git push

  # Notify Success
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [create-release, publish-npm, build-docker, upload-assets]
    if: success()
    steps:
      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "🎉 Successfully released Firebase MCP Server ${{ steps.get-version.outputs.version }}"
          echo "📦 NPM: https://www.npmjs.com/package/firebase-mcp-server"
          echo "🐳 Docker: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.version }}"
          echo "📝 Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"